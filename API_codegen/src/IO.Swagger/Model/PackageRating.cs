/* 
 * ECE 461 - Fall 2021 - Project 2
 *
 * API for ECE 461/Fall 2021/Project 2: A Trustworthy Module Registry
 *
 * OpenAPI spec version: 3.0.2
 * Contact: davisjam@purdue.edu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Package rating (cf. Project 1).  If the Project 1 that you inherited does not support one or more of the original properties, denote this with the value \&quot;-1\&quot;.
    /// </summary>
    [DataContract]
        public partial class PackageRating :  IEquatable<PackageRating>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageRating" /> class.
        /// </summary>
        /// <param name="busFactor">busFactor (required).</param>
        /// <param name="correctness">correctness (required).</param>
        /// <param name="rampUp">rampUp (required).</param>
        /// <param name="responsiveMaintainer">responsiveMaintainer (required).</param>
        /// <param name="licenseScore">licenseScore (required).</param>
        /// <param name="goodPinningPractice">The fraction of its dependencies that are pinned to at least a specific major+minor version, e.g. version 2.3.X of a package. (If there are zero dependencies, they should receive a 1.0 rating. If there are two dependencies, one pinned to this degree, then they should receive a Â½ &#x3D; 0.5 rating). (required).</param>
        public PackageRating(double? busFactor = default(double?), double? correctness = default(double?), double? rampUp = default(double?), double? responsiveMaintainer = default(double?), double? licenseScore = default(double?), double? goodPinningPractice = default(double?))
        {
            // to ensure "busFactor" is required (not null)
            if (busFactor == null)
            {
                throw new InvalidDataException("busFactor is a required property for PackageRating and cannot be null");
            }
            else
            {
                this.BusFactor = busFactor;
            }
            // to ensure "correctness" is required (not null)
            if (correctness == null)
            {
                throw new InvalidDataException("correctness is a required property for PackageRating and cannot be null");
            }
            else
            {
                this.Correctness = correctness;
            }
            // to ensure "rampUp" is required (not null)
            if (rampUp == null)
            {
                throw new InvalidDataException("rampUp is a required property for PackageRating and cannot be null");
            }
            else
            {
                this.RampUp = rampUp;
            }
            // to ensure "responsiveMaintainer" is required (not null)
            if (responsiveMaintainer == null)
            {
                throw new InvalidDataException("responsiveMaintainer is a required property for PackageRating and cannot be null");
            }
            else
            {
                this.ResponsiveMaintainer = responsiveMaintainer;
            }
            // to ensure "licenseScore" is required (not null)
            if (licenseScore == null)
            {
                throw new InvalidDataException("licenseScore is a required property for PackageRating and cannot be null");
            }
            else
            {
                this.LicenseScore = licenseScore;
            }
            // to ensure "goodPinningPractice" is required (not null)
            if (goodPinningPractice == null)
            {
                throw new InvalidDataException("goodPinningPractice is a required property for PackageRating and cannot be null");
            }
            else
            {
                this.GoodPinningPractice = goodPinningPractice;
            }
        }
        
        /// <summary>
        /// Gets or Sets BusFactor
        /// </summary>
        [DataMember(Name="BusFactor", EmitDefaultValue=false)]
        public double? BusFactor { get; set; }

        /// <summary>
        /// Gets or Sets Correctness
        /// </summary>
        [DataMember(Name="Correctness", EmitDefaultValue=false)]
        public double? Correctness { get; set; }

        /// <summary>
        /// Gets or Sets RampUp
        /// </summary>
        [DataMember(Name="RampUp", EmitDefaultValue=false)]
        public double? RampUp { get; set; }

        /// <summary>
        /// Gets or Sets ResponsiveMaintainer
        /// </summary>
        [DataMember(Name="ResponsiveMaintainer", EmitDefaultValue=false)]
        public double? ResponsiveMaintainer { get; set; }

        /// <summary>
        /// Gets or Sets LicenseScore
        /// </summary>
        [DataMember(Name="LicenseScore", EmitDefaultValue=false)]
        public double? LicenseScore { get; set; }

        /// <summary>
        /// The fraction of its dependencies that are pinned to at least a specific major+minor version, e.g. version 2.3.X of a package. (If there are zero dependencies, they should receive a 1.0 rating. If there are two dependencies, one pinned to this degree, then they should receive a Â½ &#x3D; 0.5 rating).
        /// </summary>
        /// <value>The fraction of its dependencies that are pinned to at least a specific major+minor version, e.g. version 2.3.X of a package. (If there are zero dependencies, they should receive a 1.0 rating. If there are two dependencies, one pinned to this degree, then they should receive a Â½ &#x3D; 0.5 rating).</value>
        [DataMember(Name="GoodPinningPractice", EmitDefaultValue=false)]
        public double? GoodPinningPractice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageRating {\n");
            sb.Append("  BusFactor: ").Append(BusFactor).Append("\n");
            sb.Append("  Correctness: ").Append(Correctness).Append("\n");
            sb.Append("  RampUp: ").Append(RampUp).Append("\n");
            sb.Append("  ResponsiveMaintainer: ").Append(ResponsiveMaintainer).Append("\n");
            sb.Append("  LicenseScore: ").Append(LicenseScore).Append("\n");
            sb.Append("  GoodPinningPractice: ").Append(GoodPinningPractice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackageRating);
        }

        /// <summary>
        /// Returns true if PackageRating instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageRating to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageRating input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BusFactor == input.BusFactor ||
                    (this.BusFactor != null &&
                    this.BusFactor.Equals(input.BusFactor))
                ) && 
                (
                    this.Correctness == input.Correctness ||
                    (this.Correctness != null &&
                    this.Correctness.Equals(input.Correctness))
                ) && 
                (
                    this.RampUp == input.RampUp ||
                    (this.RampUp != null &&
                    this.RampUp.Equals(input.RampUp))
                ) && 
                (
                    this.ResponsiveMaintainer == input.ResponsiveMaintainer ||
                    (this.ResponsiveMaintainer != null &&
                    this.ResponsiveMaintainer.Equals(input.ResponsiveMaintainer))
                ) && 
                (
                    this.LicenseScore == input.LicenseScore ||
                    (this.LicenseScore != null &&
                    this.LicenseScore.Equals(input.LicenseScore))
                ) && 
                (
                    this.GoodPinningPractice == input.GoodPinningPractice ||
                    (this.GoodPinningPractice != null &&
                    this.GoodPinningPractice.Equals(input.GoodPinningPractice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BusFactor != null)
                    hashCode = hashCode * 59 + this.BusFactor.GetHashCode();
                if (this.Correctness != null)
                    hashCode = hashCode * 59 + this.Correctness.GetHashCode();
                if (this.RampUp != null)
                    hashCode = hashCode * 59 + this.RampUp.GetHashCode();
                if (this.ResponsiveMaintainer != null)
                    hashCode = hashCode * 59 + this.ResponsiveMaintainer.GetHashCode();
                if (this.LicenseScore != null)
                    hashCode = hashCode * 59 + this.LicenseScore.GetHashCode();
                if (this.GoodPinningPractice != null)
                    hashCode = hashCode * 59 + this.GoodPinningPractice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
