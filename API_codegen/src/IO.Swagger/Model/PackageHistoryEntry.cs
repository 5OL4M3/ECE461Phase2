/* 
 * ECE 461 - Fall 2021 - Project 2
 *
 * API for ECE 461/Fall 2021/Project 2: A Trustworthy Module Registry
 *
 * OpenAPI spec version: 3.0.2
 * Contact: davisjam@purdue.edu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// One entry of the history of this package.
    /// </summary>
    [DataContract]
        public partial class PackageHistoryEntry :  IEquatable<PackageHistoryEntry>, IValidatableObject
    {
        /// <summary>
        /// Defines Action
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ActionEnum
        {
            /// <summary>
            /// Enum CREATE for value: CREATE
            /// </summary>
            [EnumMember(Value = "CREATE")]
            CREATE = 1,
            /// <summary>
            /// Enum UPDATE for value: UPDATE
            /// </summary>
            [EnumMember(Value = "UPDATE")]
            UPDATE = 2,
            /// <summary>
            /// Enum DOWNLOAD for value: DOWNLOAD
            /// </summary>
            [EnumMember(Value = "DOWNLOAD")]
            DOWNLOAD = 3,
            /// <summary>
            /// Enum RATE for value: RATE
            /// </summary>
            [EnumMember(Value = "RATE")]
            RATE = 4        }
        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name="Action", EmitDefaultValue=false)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PackageHistoryEntry" /> class.
        /// </summary>
        /// <param name="user">user (required).</param>
        /// <param name="date">Date of activity. (required).</param>
        /// <param name="packageMetadata">packageMetadata (required).</param>
        /// <param name="action">action (required).</param>
        public PackageHistoryEntry(User user = default(User), DateTime? date = default(DateTime?), PackageMetadata packageMetadata = default(PackageMetadata), ActionEnum action = default(ActionEnum))
        {
            // to ensure "user" is required (not null)
            if (user == null)
            {
                throw new InvalidDataException("user is a required property for PackageHistoryEntry and cannot be null");
            }
            else
            {
                this.User = user;
            }
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new InvalidDataException("date is a required property for PackageHistoryEntry and cannot be null");
            }
            else
            {
                this.Date = date;
            }
            // to ensure "packageMetadata" is required (not null)
            if (packageMetadata == null)
            {
                throw new InvalidDataException("packageMetadata is a required property for PackageHistoryEntry and cannot be null");
            }
            else
            {
                this.PackageMetadata = packageMetadata;
            }
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new InvalidDataException("action is a required property for PackageHistoryEntry and cannot be null");
            }
            else
            {
                this.Action = action;
            }
        }
        
        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="User", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Date of activity.
        /// </summary>
        /// <value>Date of activity.</value>
        [DataMember(Name="Date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Gets or Sets PackageMetadata
        /// </summary>
        [DataMember(Name="PackageMetadata", EmitDefaultValue=false)]
        public PackageMetadata PackageMetadata { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageHistoryEntry {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  PackageMetadata: ").Append(PackageMetadata).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PackageHistoryEntry);
        }

        /// <summary>
        /// Returns true if PackageHistoryEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of PackageHistoryEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageHistoryEntry input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.PackageMetadata == input.PackageMetadata ||
                    (this.PackageMetadata != null &&
                    this.PackageMetadata.Equals(input.PackageMetadata))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.PackageMetadata != null)
                    hashCode = hashCode * 59 + this.PackageMetadata.GetHashCode();
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
